# main.py

import os
from rich.console import Console
from rich.panel import Panel
from core.vulnerability_manager import VulnerabilityManager
from report_generators.report_generator import ReportGenerator
from config.config import Config
from utils.utils import read_file_contents, setup_logging
from typing import Dict, Any
import logging


class VulnerabilityDetectorApp:
    """
    Main application class for the Vulnerability Detector.
    """

    def __init__(self):
        """
        Initialize the application with configuration and console.
        """
        setup_logging()
        self.logger = logging.getLogger(self.__class__.__name__)  # Initialize logger
        self.console = Console(force_terminal=True)
        self.config = Config()
        self.manager = VulnerabilityManager(self.config)

    def display_panel(self, message: str, style: str, border_style: str):
        """
        Display a styled panel in the console.

        Args:
            message (str): Message to display.
            style (str): Text style.
            border_style (str): Border style.
        """
        self.console.print(
            Panel(
                message,
                style=style,
                border_style=border_style,
            )
        )

    def collect_input_data(self) -> Dict[str, Dict[str, str]]:
        """
        Collect input data from the input directories.

        Returns:
            Dict[str, Dict[str, str]]: Dictionary containing PHP and SQL file contents.
        """
        input_data = {'php_files': {}, 'sql_files': {}}

        # Collect PHP files
        php_dir = self.config.php_directory
        if os.path.exists(php_dir):
            for file in os.listdir(php_dir):
                file_path = os.path.join(php_dir, file)
                if os.path.isfile(file_path):
                    content = read_file_contents(file_path)
                    if file.lower().endswith('.php'):
                        input_data['php_files'][file] = content
                    else:
                        # Handle non-PHP files
                        input_data['php_files'][file] = content
                        self.console.print(f"[bold yellow]Non-PHP file detected in PHP directory: {file}[/bold yellow]")
                        self.logger.warning(f"Non-PHP file detected in PHP directory: {file}")
        else:
            self.console.print(f"[bold red]PHP directory not found: {php_dir}[/bold red]")
            self.logger.error(f"PHP directory not found: {php_dir}")

        # Collect SQL files
        sql_dir = self.config.sql_directory
        if os.path.exists(sql_dir):
            for file in os.listdir(sql_dir):
                file_path = os.path.join(sql_dir, file)
                if os.path.isfile(file_path):
                    if file.lower().endswith('.sql'):
                        content = read_file_contents(file_path)
                        input_data['sql_files'][file] = content
                    else:
                        self.console.print(f"[bold yellow]Non-SQL file detected in SQL directory: {file}[/bold yellow]")
                        self.logger.warning(f"Non-SQL file detected in SQL directory: {file}")
        else:
            self.console.print(f"[bold red]SQL directory not found: {sql_dir}[/bold red]")
            self.logger.error(f"SQL directory not found: {sql_dir}")

        return input_data

    def run(self, input_file: str = None):
        """
        Run the vulnerability detection process.

        Args:
            input_file (str, optional): Path to a specific input file for analysis.
        """
        self.display_panel("Vulnerability Detector", "bold magenta", "cyan")

        # Collect input data
        input_data = self.collect_input_data()

        # Run detectors
        findings = self.manager.run_detectors(input_data)

        # Generate reports
        report_generator = ReportGenerator(findings)
        report_generator.generate_reports()

        self.display_panel("Vulnerability Detection Completed", "bold green", "bright_blue")
