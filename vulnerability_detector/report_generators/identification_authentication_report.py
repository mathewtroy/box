from datetime import datetime
import os


# Function to generate a report for identification and authentication issues
def generate_identification_authentication_report(vulnerabilities, scanned_files):
    """
    Generate a report detailing identified vulnerabilities in PHP files.

    Args:
        vulnerabilities (list): List of identified vulnerabilities.
        scanned_files (list): List of scanned PHP files.
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_path = os.path.join('reports', 'result_static_php_identification_authentication.txt')

    with open(report_path, 'w') as report_file:
        write_report_header(report_file, timestamp)
        write_scanned_files_section(report_file, scanned_files)
        write_vulnerabilities_section(report_file, vulnerabilities)


# Helper function to write the header section of the report
def write_report_header(report_file, timestamp):
    """
    Write the header section of the report.

    Args:
        report_file (file object): The report file to write to.
        timestamp (str): Timestamp of the report generation.
    """
    report_file.write("Identification and Authentication Vulnerability Report\n")
    report_file.write(f"Date and Time of Report Generation: {timestamp}\n\n")


# Helper function to write the scanned files section of the report
def write_scanned_files_section(report_file, scanned_files):
    """
    Write the scanned files section of the report.

    Args:
        report_file (file object): The report file to write to.
        scanned_files (list): List of scanned files.
    """
    report_file.write("Scanned Files:\n")
    for file in scanned_files:
        report_file.write(f" - {file}\n")
    report_file.write("\n")


# Helper function to write the vulnerabilities section of the report
def write_vulnerabilities_section(report_file, vulnerabilities):
    """
    Write the vulnerabilities section of the report.

    Args:
        report_file (file object): The report file to write to.
        vulnerabilities (list): List of identified vulnerabilities.
    """
    if vulnerabilities:
        report_file.write("Detected Vulnerabilities:\n\n")
        for vulnerability in vulnerabilities:
            report_file.write(f"File: {vulnerability['file']}\n")
            report_file.write(f"Description: {vulnerability['description']}\n")
            report_file.write(f"Impact: {vulnerability['impact']}\n")
            report_file.write(f"Recommendation: {vulnerability['recommendation']}\n\n")
    else:
        report_file.write("No identification and authentication issues detected.\n")
