# report_generators/identification_authentication_report.py

from typing import List, Dict
from datetime import datetime
from collections import defaultdict

class IdentificationAuthenticationReportGenerator:
    """
    Generates a report for identification and authentication vulnerabilities in PHP files.
    """

    def __init__(self, vulnerabilities: List[Dict], scanned_files: List[str]):
        """
        Initialize the report generator with vulnerabilities and scanned files.

        Args:
            vulnerabilities (List[Dict]): List of detected vulnerabilities.
            scanned_files (List[str]): List of all scanned PHP files.
        """
        self.vulnerabilities = vulnerabilities
        self.scanned_files = scanned_files

    def generate(self) -> str:
        """
        Generate the identification and authentication report in the specified format.

        Returns:
            str: Formatted report string.
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report_lines = [
            "Bachelor's Project - Research on Web Application Vulnerabilities",
            "",
            "Author: Aleksandr Kross",
            "Institution: Faculty of Electrical Engineering, Czech Technical University in Prague",
            "Department: Department of Computer Science",
            "",
            "Static PHP Code Analysis Report - Identification and Authentication",
            f"Date and Time of Report Generation: {timestamp}",
            "",
            "Report Summary:",
            "This report provides an in-depth analysis of potential identification and authentication vulnerabilities in PHP files.",
            "The goal is to detect any weak or improper authentication mechanisms that could expose sensitive user information.",
            "",
            "Actions Taken:",
            "1. PHP files in the 'input/vulnerable/' directory were analyzed to verify proper handling of user authentication mechanisms.",
            "",
            "Files Scanned:"
        ]

        for file in self.scanned_files:
            report_lines.append(f" - {file}")

        report_lines.extend([
            "",
            "Detected Vulnerabilities:",
            ""
        ])

        if not self.vulnerabilities:
            report_lines.append("No vulnerabilities detected.")
        else:
            # Group vulnerabilities by file
            vuln_by_file = defaultdict(list)
            for vuln in self.vulnerabilities:
                vuln_by_file[vuln['file']].append(vuln)

            for file, vulns in vuln_by_file.items():
                report_lines.append(f"File: {file}")
                for vuln in vulns:
                    report_lines.append(f"Description: {vuln['description']}")
                    report_lines.append(f"Impact: {vuln['impact']}")
                    report_lines.append(f"Recommendation: {vuln['recommendation']}")
                    report_lines.append("")  # Blank line between vulnerabilities

        report_lines.extend([
            "Explanation:",
            "Weak or improper authentication mechanisms can lead to unauthorized access, compromising user data and system integrity. Implementing strong authentication practices is essential for securing web applications.",
            "",
            "Recommendation:",
            "1. Implement brute-force protection mechanisms such as account lockout or delays after multiple failed login attempts.",
            "2. Incorporate two-factor authentication (2FA) to provide an additional layer of security.",
            "3. Ensure that passwords are securely hashed using strong algorithms like bcrypt."
        ])

        return "\n".join(report_lines)
