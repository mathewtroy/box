from datetime import datetime
import os


# Function to generate a report for identified XSS vulnerabilities
def generate_injection_report(vulnerabilities):
    """
    Generate a report detailing identified XSS vulnerabilities in PHP files.

    Args:
        vulnerabilities (list): A list of identified vulnerabilities.
    """
    report_path = os.path.join('reports', 'result_static_php_injection.txt')
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open(report_path, 'w', encoding='utf-8') as report_file:
        write_report_header(report_file, timestamp)
        write_report_summary(report_file)
        write_vulnerability_details(report_file, vulnerabilities)


# Helper function to write the header section of the report
def write_report_header(report_file, timestamp):
    """
    Write the header section of the report.

    Args:
        report_file (file object): The report file to write to.
        timestamp (str): Timestamp of the report generation.
    """
    report_file.write("Static PHP Code Analysis Report - Injection (XSS)\n")
    report_file.write("Part of the Bachelor's Thesis\n")
    report_file.write(f"Date and Time of Report Generation: {timestamp}\n\n")


# Helper function to write the summary section of the report
def write_report_summary(report_file):
    """
    Write the summary section of the report.

    Args:
        report_file (file object): The report file to write to.
    """
    report_file.write("Report Summary:\n")
    report_file.write(
        "This report analyzes PHP files for potential XSS vulnerabilities by identifying unfiltered user input that is output to the page.\n\n")
    report_file.write("Actions Taken:\n")
    report_file.write(
        "PHP files in the 'input/vulnerable/' directory were statically analyzed to identify XSS vulnerabilities where user input is displayed directly on the page without sanitization.\n\n")


# Helper function to write the details of vulnerabilities in the report
def write_vulnerability_details(report_file, vulnerabilities):
    """
    Write the details of identified vulnerabilities in the report.

    Args:
        report_file (file object): The report file to write to.
        vulnerabilities (list): A list of identified vulnerabilities.
    """
    if vulnerabilities:
        report_file.write("Vulnerabilities Found:\n\n")
        for vuln in vulnerabilities:
            report_file.write(f"File: {vuln['file']}\n")
            report_file.write(f"Description: {vuln['description']}\n")
            report_file.write("Potential Vulnerable Code Locations:\n")
            for line in vuln['lines']:
                report_file.write(f" - {line}\n")
            report_file.write(f"Recommendation: {vuln['recommendation']}\n\n")
        report_file.write("Result:\nPotential XSS vulnerabilities were detected and are detailed above.\n")
    else:
        report_file.write("Result:\nNo XSS vulnerabilities were detected during the static analysis.\n")
