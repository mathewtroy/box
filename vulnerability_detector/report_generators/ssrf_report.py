import os
from datetime import datetime


def write_report_header(report_file, timestamp):
    """
    Write the header section of the SSRF vulnerability report.

    Args:
        report_file (file object): The report file to write to.
        timestamp (str): The timestamp of when the report was generated.
    """
    report_file.write("SSRF Vulnerability Report\n")
    report_file.write(f"Date and Time of Report Generation: {timestamp}\n\n")


def write_scanned_files(report_file, scanned_files):
    """
    Write the list of scanned files to the SSRF vulnerability report.

    Args:
        report_file (file object): The report file to write to.
        scanned_files (list): A list of files that were scanned.
    """
    report_file.write("Scanned Files:\n")
    for file in scanned_files:
        report_file.write(f" - {file}\n")


def write_vulnerabilities(report_file, vulnerabilities):
    """
    Write details of detected vulnerabilities to the SSRF vulnerability report.

    Args:
        report_file (file object): The report file to write to.
        vulnerabilities (list): A list of detected vulnerabilities.
    """
    if vulnerabilities:
        report_file.write("\nDetected Vulnerabilities:\n\n")
        for vulnerability in vulnerabilities:
            report_file.write(
                f"File: {vulnerability['file']}\n"
                f"Description: {vulnerability['description']}\n"
                f"Impact: {vulnerability['impact']}\n"
                f"Recommendation: {vulnerability['recommendation']}\n\n"
            )
    else:
        report_file.write("\nNo SSRF vulnerabilities detected.\n")


def generate_ssrf_report(vulnerabilities, scanned_files):
    """
    Generate a report for potential SSRF vulnerabilities in scanned PHP files.

    Args:
        vulnerabilities (list): A list of detected vulnerabilities.
        scanned_files (list): A list of files that were scanned.
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_path = 'reports/result_static_php_ssrf.txt'

    with open(report_path, 'w', encoding='utf-8') as report_file:
        write_report_header(report_file, timestamp)
        write_scanned_files(report_file, scanned_files)
        write_vulnerabilities(report_file, vulnerabilities)
