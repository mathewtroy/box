from datetime import datetime


def write_report_header(report_file, timestamp, page_name):
    """
    Write the header and summary of the dynamic vulnerability report.

    Args:
        report_file (file object): The file object for the report.
        timestamp (str): The timestamp of when the report is generated.
        page_name (str): The name of the page being analyzed.
    """
    report_file.write(
        f"Vulnerability Report\n"
        f"Part of the bachelor's thesis\n"
        f"Date and Time of Report Generation: {timestamp}\n\n"
        f"Report Summary:\n"
        f"This report outlines the detection of vulnerabilities and details on exploitation attempts.\n\n"
        f"Actions Taken:\n"
        f"1. Logged in to the application.\n"
        f"2. Navigated to '{page_name}' and submitted XSS payload.\n"
        f"3. Attempted to verify data persistence by accessing Adminer database.\n\n"
    )


def write_vulnerabilities(report_file, vulnerabilities, page_name):
    """
    Write details of detected vulnerabilities into the report.

    Args:
        report_file (file object): The file object for the report.
        vulnerabilities (list): A list of vulnerabilities detected during the test.
        page_name (str): The name of the page being analyzed.
    """
    for vulnerability in vulnerabilities:
        report_file.write(
            f"Page Name: {page_name}\n"
            f"Vulnerability Found: {vulnerability['type']}\n"
            f"Description: {vulnerability['description']}\n"
            f"Potential Impact: {vulnerability['impact']}\n"
            f"Recommended Fix: {vulnerability['fix']}\n"
            f"Location: {vulnerability['location']}\n\n"
        )


def write_successful_result(report_file, captured_data, page_source):
    """
    Write the result details for a successful vulnerability exploitation.

    Args:
        report_file (file object): The file object for the report.
        captured_data (dict): Data captured during the test, such as cookies and credentials.
        page_source (str): The source code of the page being analyzed.
    """
    report_file.write("Result:\nThe vulnerable data was successfully submitted and verified in the database.\n")

    if captured_data:
        report_file.write(f"\nCaptured Data:\nCookies: {captured_data['cookies']}\n")
        report_file.write(f"Session ID (PHPSESSID): {captured_data['PHPSESSID']}\n")
        report_file.write(f"Username: {captured_data['username']}\nPassword: {captured_data['password']}\n")

    if page_source:
        report_file.write(f"\nCaptured Page Source:\n{page_source}\n")


def write_no_vulnerability_result(report_file):
    """
    Write the result for cases where no vulnerabilities were detected.

    Args:
        report_file (file object): The file object for the report.
    """
    report_file.write("No vulnerabilities were detected during the scan.\n")


def generate_dynamic_report(success, page_name, vulnerabilities, captured_data=None, page_source=None):
    """
    Generate a detailed dynamic vulnerability report.

    Args:
        success (bool): Indicates if the vulnerability exploitation was successful.
        page_name (str): The name of the page being analyzed.
        vulnerabilities (list): A list of detected vulnerabilities.
        captured_data (dict, optional): Data captured during the test, such as cookies and credentials.
        page_source (str, optional): The source code of the page being analyzed.
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_path = 'reports/result_dynamic_php_injection.txt'

    with open(report_path, 'w') as report_file:
        # Write the report header and summary
        write_report_header(report_file, timestamp, page_name)

        # Write details of detected vulnerabilities
        write_vulnerabilities(report_file, vulnerabilities, page_name)

        # Write results based on whether vulnerabilities were successfully exploited
        if success:
            write_successful_result(report_file, captured_data, page_source)
        else:
            write_no_vulnerability_result(report_file)

    print("Dynamic report generated successfully!")
