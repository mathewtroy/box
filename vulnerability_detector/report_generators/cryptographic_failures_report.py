from datetime import datetime
import os


def generate_cryptographic_failures_report(vulnerabilities, plaintext_passwords, scanned_files):
    """
    Generate a detailed cryptographic failures report for scanned PHP and SQL files.

    Args:
        vulnerabilities (list): List of identified vulnerabilities in PHP files.
        plaintext_passwords (dict): Dictionary of plaintext passwords found in SQL files.
        scanned_files (list): List of all scanned PHP and SQL files.
    """
    report_path = os.path.join('reports', 'result_static_php_cryptographic_failures.txt')
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Create and write the report
    with open(report_path, 'w', encoding='utf-8') as report_file:
        write_report_header(report_file, timestamp)
        write_report_summary(report_file)
        write_actions_taken(report_file)
        write_scanned_files(report_file, scanned_files)
        write_vulnerabilities(report_file, vulnerabilities)
        write_plaintext_passwords(report_file, plaintext_passwords)
        write_explanation_and_recommendations(report_file)



def write_report_header(report_file, timestamp):
    """
    Write the header section of the report.

    Args:
        report_file (file object): The report file to write to.
        timestamp (str): The current date and time for the report generation.
    """
    report_file.write("Static PHP Code Analysis Report - Cryptographic Failures\n")
    report_file.write("Part of the Bachelor's Thesis\n")
    report_file.write(f"Date and Time of Report Generation: {timestamp}\n\n")


def write_report_summary(report_file):
    """
    Write the summary section of the report.

    Args:
        report_file (file object): The report file to write to.
    """
    report_file.write("Report Summary:\n")
    report_file.write(
        "This report provides an in-depth analysis of potential cryptographic vulnerabilities in PHP and SQL files.\n")
    report_file.write(
        "The goal is to detect any weak or improper password handling methods that could expose sensitive user information.\n\n")


def write_actions_taken(report_file):
    """
    Write the actions taken section of the report.

    Args:
        report_file (file object): The report file to write to.
    """
    report_file.write("Actions Taken:\n")
    report_file.write(
        "1. PHP files in the 'input/vulnerable/' directory were analyzed to verify proper handling of passwords during registration and authentication.\n")
    report_file.write(
        "2. SQL files in the 'input/db/' directory were checked for plaintext password storage vulnerabilities.\n\n")


def write_scanned_files(report_file, scanned_files):
    """
    Write the list of scanned files to the report.

    Args:
        report_file (file object): The report file to write to.
        scanned_files (list): List of all scanned files.
    """
    report_file.write("Files Scanned:\n")
    for scanned_file in scanned_files:
        report_file.write(f" - {scanned_file}\n")
    report_file.write("\n")


def write_vulnerabilities(report_file, vulnerabilities):
    """
    Write detailed vulnerabilities to the report.

    Args:
        report_file (file object): The report file to write to.
        vulnerabilities (list): List of identified vulnerabilities.
    """
    report_file.write("Vulnerabilities Found:\n\n")
    for vuln in vulnerabilities:
        report_file.write(f"File: {vuln['file']}\n")
        report_file.write(f"Description: {vuln['description']}\n")
        report_file.write(f"Potential Impact: {vuln['impact']}\n")
        report_file.write(f"Recommendation: {vuln['recommendation']}\n\n")


def write_plaintext_passwords(report_file, plaintext_passwords):
    """
    Write plaintext password findings to the report.

    Args:
        report_file (file object): The report file to write to.
        plaintext_passwords (dict): Dictionary of plaintext passwords found in SQL files.
    """
    report_file.write("\nUser Data Tables with Plaintext Passwords Detected:\n\n")
    for file_name, records in plaintext_passwords.items():
        report_file.write(f"File: {file_name}\n")
        if records == "No plaintext passwords found.":
            report_file.write(" - No plaintext passwords found.\n")
        else:
            for record in records:
                report_file.write(" - " + ", ".join([f"{key}: {value}" for key, value in record.items()]) + "\n")


def write_explanation_and_recommendations(report_file):
    """
    Write the explanation and recommendations section of the report.

    Args:
        report_file (file object): The report file to write to.
    """
    report_file.write(
        "\nExplanation:\nStoring passwords in plain text exposes user information to potential breaches. "
        "All sensitive data, especially passwords, should be securely hashed using a strong hashing algorithm (e.g., bcrypt).\n\n")

    report_file.write("Recommendation:\n")
    report_file.write(
        "1. Always use password_hash() to store passwords securely in the database.\n"
        "2. Avoid storing passwords directly in plain text.\n"
        "3. For existing records, consider updating the storage mechanism by rehashing the passwords with a secure algorithm like bcrypt.\n")
