# run_sql_injection_test.py

import time

from selenium import webdriver
from selenium.webdriver.common.by import By

from config.config import LOGIN_URL, REVIEW_URL, USERNAME, PASSWORD
from report_generator import generate_sql_injection_report
from utils import capture_sensitive_data

def run_sql_injection_test():
    driver = webdriver.Chrome()

    try:
        # Step 1: Login with valid credentials
        driver.get(LOGIN_URL)
        time.sleep(2)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/div[1]/input').send_keys(USERNAME)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/div[2]/input').send_keys(PASSWORD)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/input').click()
        time.sleep(3)

        # Step 2: Navigate to the review page
        page_name = 'Review Page'
        driver.get(REVIEW_URL)
        time.sleep(2)

        # Prepare SQL Injection payloads
        sql_injection_payloads = [
            "' OR '1'='1",
            # "' OR '1'='1' --",
            # "'; DROP TABLE users; --",
            # "'; SELECT * FROM users; --",
            # "' UNION SELECT NULL, NULL; --",
            # "admin' --",
            "' OR ''='",
            # "' OR 1=1 --",
            "' OR 'a'='a",
            "'; EXEC xp_cmdshell('dir'); --",
        ]

        vulnerabilities = []
        for payload in sql_injection_payloads:
            # Clear the textarea
            driver.find_element(By.XPATH, '/html/body/section[2]/div/form/textarea').clear()

            # Input the payload into the review textarea
            driver.find_element(By.XPATH, '/html/body/section[2]/div/form/textarea').send_keys(payload)
            driver.find_element(By.XPATH, '/html/body/section[2]/div/form/button').click()
            time.sleep(2)

            # Capture the page source and check for signs of vulnerability
            page_source = driver.page_source.lower()
            if "sql syntax" in page_source or "warning" in page_source or "error" in page_source:
                # If an SQL error message is displayed, it may indicate a vulnerability
                vulnerabilities.append({
                    'type': 'SQL Injection',
                    'payload': payload,
                    'description': 'Potential SQL Injection vulnerability detected when submitting special characters.',
                    'impact': 'May allow attackers to manipulate database queries.',
                    'fix': 'Use parameterized queries and sanitize all user inputs.',
                    'location': 'Review form on the review page'
                })
                break  # Stop after detecting a vulnerability

        # Step 3: Generate report
        if vulnerabilities:
            generate_sql_injection_report(True, page_name, vulnerabilities, page_source)
        else:
            generate_sql_injection_report(False, page_name, vulnerabilities)
    finally:
        driver.quit()
