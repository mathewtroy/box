# detectors/identification_authentication_detector.py

import re
from typing import List, Dict, Any
from core.base_detector import BaseDetector
import logging

class IdentificationAuthenticationDetector(BaseDetector):
    """
    Detector for identifying identification and authentication vulnerabilities in PHP files.
    """

    def __init__(self, config: Dict):
        super().__init__(config)
        self.logger = logging.getLogger(self.__class__.__name__)

    def scan(self, input_data: Dict[str, Dict[str, str]]) -> Dict[str, Any]:
        """
        Scan PHP files for identification and authentication vulnerabilities.

        Args:
            input_data (Dict[str, Dict[str, str]]): Dictionary containing 'php_files' and 'sql_files' with their contents.

        Returns:
            Dict[str, Any]: Dictionary containing vulnerabilities and scanned_files.
        """
        vulnerabilities = []
        scanned_files = []

        php_files = input_data.get('php_files', {})
        if not php_files:
            self.logger.info("No PHP files to scan for Identification and Authentication.")
        else:
            for php_file, content in php_files.items():
                # Focus on authentication-related PHP files, e.g., login.php
                if 'login' in php_file.lower():
                    scanned_files.append(php_file)
                    self.logger.info(f"Scanning PHP file for authentication vulnerabilities: {php_file}")
                    vuln = self.analyze_php_file(content, php_file)
                    vulnerabilities.extend(vuln)
                else:
                    self.logger.debug(f"Skipping non-authentication PHP file: {php_file}")

        return {
            'vulnerabilities': vulnerabilities,
            'scanned_files': scanned_files
        }

    def analyze_php_file(self, content: str, php_file: str) -> List[Dict]:
        """
        Analyze a PHP file for authentication vulnerabilities.

        Args:
            content (str): Content of the PHP file.
            php_file (str): Name of the PHP file.

        Returns:
            List[Dict]: List of vulnerabilities found in the PHP file.
        """
        vulnerabilities = []

        # Check for brute-force protection mechanisms
        brute_force_pattern = re.compile(
            r'(lockout|delay|rate_limit)\s*\(',
            re.IGNORECASE
        )
        if not brute_force_pattern.search(content):
            vulnerabilities.append({
                'file': php_file,
                'description': 'Missing brute-force protection mechanism.',
                'impact': 'Vulnerable to brute-force attacks.',
                'recommendation': 'Implement account lockout or delay after multiple failed login attempts.'
            })
            self.logger.warning(f"Missing brute-force protection in {php_file}")

        # Check for two-factor authentication implementation
        two_factor_pattern = re.compile(
            r'(two_factor_auth|2fa)\s*\(',
            re.IGNORECASE
        )
        if not two_factor_pattern.search(content):
            vulnerabilities.append({
                'file': php_file,
                'description': 'Missing two-factor authentication.',
                'impact': 'Accounts are vulnerable to unauthorized access with a password alone.',
                'recommendation': 'Implement two-factor authentication for stronger security.'
            })
            self.logger.warning(f"Missing two-factor authentication in {php_file}")

        # Check for secure password handling (though this may overlap with CryptographicFailuresDetector)
        password_secure_pattern = re.compile(
            r'(password_hash|password_verify)\s*\(',
            re.IGNORECASE
        )
        if not password_secure_pattern.search(content):
            vulnerabilities.append({
                'file': php_file,
                'description': 'Plain text or weakly hashed passwords detected.',
                'impact': 'Passwords may be exposed in case of a database breach.',
                'recommendation': 'Use strong hashing (e.g., bcrypt) for storing passwords.'
            })
            self.logger.warning(f"Weak or plain text password handling in {php_file}")

        return vulnerabilities
