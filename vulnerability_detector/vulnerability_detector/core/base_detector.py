# core/base_detector.py

from abc import ABC, abstractmethod
from typing import List, Dict


class BaseDetector(ABC):
    """
    Abstract base class for all vulnerability detectors.
    """

    def __init__(self, config: Dict):
        """
        Initialize the detector with configuration settings.

        Args:
            config (Dict): Configuration dictionary.
        """
        self.config = config

    @abstractmethod
    def scan(self, input_data: Dict[str, Dict[str, str]]) -> List[Dict]:
        """
        Scan the provided input data for vulnerabilities.

        Args:
            input_data (Dict[str, Dict[str, str]]): Dictionary containing categorized input files.

        Returns:
            List[Dict]: List of detected vulnerabilities.
        """
        pass
