# core/vulnerability_manager.py

import logging
from typing import Dict, Any
from rich.console import Console  # Import Console from rich
from detectors.cryptographic_failures_detector import CryptographicFailuresDetector
from detectors.dynamic_injection_detector import DynamicInjectionDetector
from detectors.identification_authentication_detector import IdentificationAuthenticationDetector
from detectors.injection_detector import InjectionDetector
from detectors.insecure_design_detector import InsecureDesignDetector  # Import the new detector
from detectors.logging_monitoring_detector import LoggingMonitoringDetector
from detectors.ssrf_detector import SSRFDetector


class VulnerabilityManager:
    """
    Manages the running of different vulnerability detectors.
    """

    def __init__(self, config: Dict):
        """
        Initialize the VulnerabilityManager with the given configuration.

        Args:
            config (Dict): Configuration dictionary.
        """
        self.config = config
        self.logger = logging.getLogger(self.__class__.__name__)  # Initialize logger
        self.console = Console()  # Initialize rich console
        self.detectors = [
            CryptographicFailuresDetector(config),
            IdentificationAuthenticationDetector(config),
            InjectionDetector(config),
            InsecureDesignDetector(config),
            LoggingMonitoringDetector(config),
            SSRFDetector(config),
            DynamicInjectionDetector(config),        ]

    def run_detectors(self, input_data: Dict[str, Dict[str, str]]) -> Dict[str, Any]:
        """
        Run all configured detectors on the input data.

        Args:
            input_data (Dict[str, Dict[str, str]]): Input data containing file contents.

        Returns:
            Dict[str, Any]: Aggregated findings from all detectors.
        """
        aggregated_findings = {
            'vulnerabilities': [],
            'scanned_files': []
        }

        for detector in self.detectors:
            detector_name = detector.__class__.__name__
            # Print the message in cyan color using rich
            self.console.print(f"[cyan]Running detector: {detector_name}[/cyan]")
            # Log the message as usual
            self.logger.info(f"Running detector: {detector_name}")
            findings = detector.scan(input_data)

            # Add the 'detector' key to each vulnerability
            for vuln in findings['vulnerabilities']:
                vuln['detector'] = detector_name

            aggregated_findings['vulnerabilities'].extend(findings['vulnerabilities'])
            aggregated_findings['scanned_files'].extend(findings['scanned_files'])
            self.logger.info(f"{detector_name} found {len(findings['vulnerabilities'])} vulnerabilities.\n")

        return aggregated_findings
