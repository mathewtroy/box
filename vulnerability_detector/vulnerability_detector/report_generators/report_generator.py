# report_generators/report_generator.py

import os
from typing import Dict, Any
import logging
from datetime import datetime

from report_generators.cryptographic_failures_report import CryptographicFailuresReportGenerator
from report_generators.identification_authentication_report import IdentificationAuthenticationReportGenerator
from report_generators.injection_report import InjectionReportGenerator
from report_generators.insecure_design_report import InsecureDesignReportGenerator
from report_generators.logging_monitoring_report import LoggingMonitoringReportGenerator
from report_generators.ssrf_report import SSRFReportGenerator


class ReportGenerator:
    """
    Generates reports based on the findings from vulnerability detectors.
    """

    def __init__(self, findings: Dict[str, Any]):
        """
        Initialize the ReportGenerator with findings.

        Args:
            findings (Dict[str, Any]): Findings from vulnerability detectors.
        """
        self.findings = findings
        self.logger = logging.getLogger(self.__class__.__name__)  # Initialize logger

    def generate_reports(self):
        """
        Generate reports for the detected vulnerabilities and scanned files.
        """
        # Create reports directory if it doesn't exist
        os.makedirs('reports', exist_ok=True)

        vulnerabilities = self.findings.get('vulnerabilities', [])
        scanned_files = self.findings.get('scanned_files', [])
        plaintext_passwords = self.findings.get('plaintext_passwords', {})

        # Remove duplicates from scanned files
        scanned_files = list(set(scanned_files))

        # Generate Cryptographic Failures Report
        crypto_vulns = [vuln for vuln in vulnerabilities if vuln.get('detector') == 'CryptographicFailuresDetector']
        if crypto_vulns:
            crypto_report_generator = CryptographicFailuresReportGenerator(
                vulnerabilities=crypto_vulns,
                scanned_files=scanned_files,
                plaintext_passwords=plaintext_passwords
            )
            crypto_report = crypto_report_generator.generate()
            with open('reports/static_report_php_cryptographic_failures.txt', 'w', encoding='utf-8') as report_file:
                report_file.write(crypto_report)
            self.logger.info("Cryptographic Failures Report generated.")
        else:
            self.logger.info("No cryptographic failures vulnerabilities found to generate a report.")

        # Generate Identification and Authentication Report
        auth_vulns = [vuln for vuln in vulnerabilities if vuln.get('detector') == 'IdentificationAuthenticationDetector']
        if auth_vulns:
            auth_report_generator = IdentificationAuthenticationReportGenerator(
                vulnerabilities=auth_vulns,
                scanned_files=scanned_files
            )
            auth_report = auth_report_generator.generate()
            with open('reports/static_report_php_identification_authentication.txt', 'w', encoding='utf-8') as report_file:
                report_file.write(auth_report)
            self.logger.info("Identification and Authentication Report generated.")
        else:
            self.logger.info("No identification and authentication vulnerabilities found to generate a report.")

        # Generate Injection Report
        injection_vulns = [vuln for vuln in vulnerabilities if vuln.get('detector') == 'InjectionDetector']
        if injection_vulns:
            injection_report_generator = InjectionReportGenerator(
                vulnerabilities=injection_vulns,
                scanned_files=scanned_files
            )
            injection_report = injection_report_generator.generate()
            with open('reports/static_report_php_injection.txt', 'w', encoding='utf-8') as report_file:
                report_file.write(injection_report)
            self.logger.info("Injection Report generated.")
        else:
            self.logger.info("No injection vulnerabilities found to generate a report.")

        # Generate Insecure Design Report
        insecure_design_vulns = [vuln for vuln in vulnerabilities if vuln.get('detector') == 'InsecureDesignDetector']
        if insecure_design_vulns:
            insecure_design_report_generator = InsecureDesignReportGenerator(
                vulnerabilities=insecure_design_vulns,
                scanned_files=scanned_files
            )
            insecure_design_report = insecure_design_report_generator.generate()
            with open('reports/static_report_php_insecure_design.txt', 'w', encoding='utf-8') as report_file:
                report_file.write(insecure_design_report)
            self.logger.info("Insecure Design Report generated.")
        else:
            self.logger.info("No insecure design vulnerabilities found to generate a report.")

        # Generate Logging and Monitoring Report
        logging_monitoring_vulns = [vuln for vuln in vulnerabilities if
                                        vuln.get('detector') == 'LoggingMonitoringDetector']
        if logging_monitoring_vulns:
            logging_monitoring_report_generator = LoggingMonitoringReportGenerator(
                vulnerabilities=logging_monitoring_vulns,
                scanned_files=scanned_files
            )
            logging_monitoring_report = logging_monitoring_report_generator.generate()
            with open('reports/static_report_php_logging_monitoring.txt', 'w', encoding='utf-8') as report_file:
                report_file.write(logging_monitoring_report)
            self.logger.info("Logging and Monitoring Report generated.")
        else:
            self.logger.info("No logging and monitoring vulnerabilities found to generate a report.")

        # Generate SSRF Report
        ssrf_vulns = [vuln for vuln in vulnerabilities if vuln.get('detector') == 'SSRFDetector']
        if ssrf_vulns:
            ssrf_report_generator = SSRFReportGenerator(
                vulnerabilities=ssrf_vulns,
                scanned_files=scanned_files
            )
            ssrf_report = ssrf_report_generator.generate()
            with open('reports/static_report_php_ssrf.txt', 'w', encoding='utf-8') as report_file:
                report_file.write(ssrf_report)
            self.logger.info("SSRF Report generated.")
        else:
            self.logger.info("No SSRF vulnerabilities found to generate a report.")

        # Generate Dynamic Injection Report (if needed)
        dynamic_injection_vulns = [vuln for vuln in vulnerabilities if
                                   vuln.get('detector') == 'DynamicInjectionDetector']
        if dynamic_injection_vulns:
            # Since the dynamic report is already generated within the detector, you might only need to log this
            self.logger.info("Dynamic Injection vulnerabilities detected. See dynamic report for details.")
        else:
            self.logger.info("No dynamic injection vulnerabilities found.")

        # Generate a general vulnerabilities report
        if vulnerabilities:
            report_path = os.path.join('reports', 'general_vulnerabilities_report.txt')
            with open(report_path, 'w', encoding='utf-8') as report_file:
                report_file.write("General Vulnerabilities Report\n")
                report_file.write(f"Date and Time of Report Generation: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                report_file.write("Report Summary:\n")
                report_file.write("This report aggregates all detected vulnerabilities.\n\n")
                report_file.write("Vulnerabilities Found:\n\n")
                for vuln in vulnerabilities:
                    report_file.write(f"Detector: {vuln.get('detector', 'Unknown')}\n")
                    report_file.write(f"File: {vuln['file']}\n")
                    report_file.write(f"Description: {vuln['description']}\n")
                    report_file.write(f"Impact: {vuln['impact']}\n")
                    report_file.write(f"Recommendation: {vuln['recommendation']}\n")
                    locations = vuln.get('locations', [])
                    if locations:
                        report_file.write("Potential Vulnerable Code Locations:\n")
                        for location in locations:
                            report_file.write(f" - {location}\n")
                    else:
                        report_file.write("No specific locations were identified.\n")
                    report_file.write("\n")
            self.logger.info(f"General vulnerabilities report generated: {report_path}")
        else:
            self.logger.info("No vulnerabilities found to generate a general report.")

        # Generate a scanned files report
        if scanned_files:
            report_path = os.path.join('reports', 'scanned_files_report.txt')
            with open(report_path, 'w', encoding='utf-8') as report_file:
                report_file.write("Scanned Files Report\n")
                report_file.write(f"Date and Time of Report Generation: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                report_file.write("Files Scanned:\n")
                for file in sorted(scanned_files):
                    report_file.write(f" - {file}\n")
            self.logger.info(f"Scanned files report generated: {report_path}")
        else:
            self.logger.info("No files were scanned to generate a report.")
