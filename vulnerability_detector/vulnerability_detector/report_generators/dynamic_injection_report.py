# report_generators/dynamic_injection_report.py

from datetime import datetime
import os
import logging

class DynamicInjectionReportGenerator:
    """
    Generates a report for dynamic injection testing.
    """

    def __init__(self, success, page_name, vulnerabilities, captured_data=None, page_source=None):
        """
        Initialize the report generator with test results.

        Args:
            success (bool): Indicates if the vulnerability exploitation was successful.
            page_name (str): The name of the page being analyzed.
            vulnerabilities (list): A list of detected vulnerabilities.
            captured_data (dict, optional): Data captured during the test, such as cookies and credentials.
            page_source (str, optional): The source code of the page being analyzed.
        """
        self.success = success
        self.page_name = page_name
        self.vulnerabilities = vulnerabilities
        self.captured_data = captured_data
        self.page_source = page_source
        self.logger = logging.getLogger(self.__class__.__name__)

    def generate_report(self):
        """
        Generate a detailed dynamic vulnerability report.
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report_path = 'reports/dynamic_report_php_injection.txt'

        # Ensure the reports directory exists
        os.makedirs(os.path.dirname(report_path), exist_ok=True)

        with open(report_path, 'w', encoding='utf-8') as report_file:
            # Write the report header and summary
            self.write_report_header(report_file, timestamp)

            # Write details of detected vulnerabilities
            if self.vulnerabilities:
                self.write_vulnerabilities(report_file)
            else:
                report_file.write("No vulnerabilities were detected during the scan.\n\n")

            # Write results based on whether vulnerabilities were successfully exploited
            if self.success:
                self.write_successful_result(report_file)
            else:
                self.write_no_vulnerability_result(report_file)

        self.logger.info("Dynamic Injection Report generated successfully!")

    def write_report_header(self, report_file, timestamp):
        """
        Write the header and summary of the dynamic vulnerability report.

        Args:
            report_file (file object): The file object for the report.
            timestamp (str): The timestamp of when the report is generated.
        """
        report_lines = [
            "Bachelor's Project - Research on Web Application Vulnerabilities",
            "",
            "Author: Aleksandr Kross",
            "Institution: Faculty of Electrical Engineering, Czech Technical University in Prague",
            "Department: Department of Computer Science",
            "",
            "Dynamic PHP Code Analysis Report - Injection",
            f"Date and Time of Report Generation: {timestamp}",
            "",
            "Report Summary:",
            "This report analyzes PHP files for potential XSS vulnerabilities by identifying unfiltered user input that is output to the page.",
            "",
            "Actions Taken:",
            f"1. Logged in to the application.",
            f"2. Navigated to '{self.page_name}' and submitted XSS payload.",
            "3. Attempted to verify data persistence by accessing Adminer database.",
            "",
        ]
        report_file.write("\n".join(report_lines) + "\n")

    def write_vulnerabilities(self, report_file):
        """
        Write details of detected vulnerabilities into the report.

        Args:
            report_file (file object): The file object for the report.
        """
        report_file.write("Vulnerabilities Found:\n\n")
        for vulnerability in self.vulnerabilities:
            report_file.write(
                f"Page Name: {self.page_name}\n"
                f"Vulnerability Found: {vulnerability.get('type', 'N/A')}\n"
                f"Description: {vulnerability.get('description', 'N/A')}\n"
                f"Potential Impact: {vulnerability.get('impact', 'N/A')}\n"
                f"Recommended Fix: {vulnerability.get('recommendation', 'N/A')}\n"
                f"Location: {vulnerability.get('location', 'N/A')}\n\n"
            )

    def write_successful_result(self, report_file):
        """
        Write the result details for a successful vulnerability exploitation.

        Args:
            report_file (file object): The file object for the report.
        """
        report_file.write("Result:\nThe vulnerable data was successfully submitted and verified in the database.\n\n")

        if self.captured_data:
            report_file.write("Captured Data:\n")
            report_file.write(f"Cookies: {self.captured_data.get('cookies')}\n")
            report_file.write(f"Session ID (PHPSESSID): {self.captured_data.get('PHPSESSID')}\n\n")

        if self.page_source:
            report_file.write(f"Captured Page Source:\n{self.page_source}\n")

    def write_no_vulnerability_result(self, report_file):
        """
        Write the result for cases where no vulnerabilities were detected.

        Args:
            report_file (file object): The file object for the report.
        """
        report_file.write("No vulnerabilities were detected during the scan.\n")
