# report_generators/cryptographic_failures_report.py

from typing import List, Dict, Union
from datetime import datetime
from collections import defaultdict


class CryptographicFailuresReportGenerator:
    """
    Generates a report for cryptographic failures in PHP and SQL files.
    """

    def __init__(self, vulnerabilities: List[Dict], scanned_files: List[str],
                 plaintext_passwords: Dict[str, Union[str, List[Dict]]]):
        """
        Initialize the report generator with vulnerabilities, scanned files, and plaintext passwords.

        Args:
            vulnerabilities (List[Dict]): List of detected vulnerabilities.
            scanned_files (List[str]): List of all scanned PHP and SQL files.
            plaintext_passwords (Dict[str, Union[str, List[Dict]]]): Dictionary mapping SQL files to plaintext password records or a message.
        """
        self.vulnerabilities = vulnerabilities
        self.scanned_files = scanned_files
        self.plaintext_passwords = plaintext_passwords

    def generate(self) -> str:
        """
        Generate the cryptographic failures report in the specified format.

        Returns:
            str: Formatted report string.
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report_lines = [
            "Bachelor's Project - Research on Web Application Vulnerabilities",
            "",
            "Author: Aleksandr Kross",
            "Institution: Faculty of Electrical Engineering, Czech Technical University in Prague",
            "Department: Department of Computer Science",
            "",
            "Static PHP Code Analysis Report - Cryptographic Failures",
            f"Date and Time of Report Generation: {timestamp}",
            "",
            "Report Summary:",
            "This report provides an in-depth analysis of potential cryptographic vulnerabilities in PHP and SQL files.",
            "The goal is to detect any weak or improper password handling methods that could expose sensitive user information.",
            "",
            "Actions Taken:",
            "1. PHP files in the 'input/vulnerable/' directory were analyzed to verify proper handling of passwords during registration and authentication.",
            "2. SQL files in the 'input/db/' directory were checked for plaintext password storage vulnerabilities.",
            "",
            "Files Scanned:"
        ]

        for file in self.scanned_files:
            report_lines.append(f" - {file}")

        report_lines.extend([
            "",
            "Vulnerabilities Found:",
            ""
        ])

        if not self.vulnerabilities:
            report_lines.append("No vulnerabilities detected.")
        else:
            # Group vulnerabilities by file
            vuln_by_file = defaultdict(list)
            for vuln in self.vulnerabilities:
                vuln_by_file[vuln['file']].append(vuln)

            for file, vulns in vuln_by_file.items():
                report_lines.append(f"File: {file}")
                for vuln in vulns:
                    report_lines.append(f"Description: {vuln['description']}")
                    report_lines.append(f"Potential Impact: {vuln['impact']}")
                    report_lines.append(f"Recommendation: {vuln['recommendation']}")
                    report_lines.append("")  # Blank line between vulnerabilities

        report_lines.extend([
            "User Data Tables with Plaintext Passwords Detected:",
            ""
        ])

        for sql_file, records in self.plaintext_passwords.items():
            report_lines.append(f"File: {sql_file}")
            if isinstance(records, str):
                report_lines.append(f" - {records}")
            elif isinstance(records, list):
                for record in records:
                    record_str = ", ".join([f"{key}: {value}" for key, value in record.items()])
                    report_lines.append(f" - {record_str}")
            report_lines.append("")  # Blank line after each file's records

        report_lines.extend([
            "Explanation:",
            "Storing passwords in plain text exposes user information to potential breaches. All sensitive data, especially passwords, should be securely hashed using a strong hashing algorithm (e.g., bcrypt).",
            "",
            "Recommendation:",
            "1. Always use password_hash() to store passwords securely in the database.",
            "2. Avoid storing passwords directly in plain text.",
            "3. For existing records, consider updating the storage mechanism by rehashing the passwords with a secure algorithm like bcrypt."
        ])

        return "\n".join(report_lines)
