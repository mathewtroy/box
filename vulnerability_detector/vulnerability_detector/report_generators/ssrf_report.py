# report_generators/ssrf_report.py

from typing import List, Dict
from datetime import datetime
from collections import defaultdict

class SSRFReportGenerator:
    """
    Generates a report for SSRF vulnerabilities in PHP files.
    """

    def __init__(self, vulnerabilities: List[Dict], scanned_files: List[str]):
        """
        Initialize the report generator with vulnerabilities and scanned files.

        Args:
            vulnerabilities (List[Dict]): List of detected vulnerabilities.
            scanned_files (List[str]): List of all scanned PHP files.
        """
        self.vulnerabilities = vulnerabilities
        self.scanned_files = scanned_files

    def generate(self) -> str:
        """
        Generate the SSRF vulnerability report in the specified format.

        Returns:
            str: Formatted report string.
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report_lines = [
            "Bachelor's Project - Research on Web Application Vulnerabilities",
            "",
            "Author: Aleksandr Kross",
            "Institution: Faculty of Electrical Engineering, Czech Technical University in Prague",
            "Department: Department of Computer Science",
            "",
            "Static PHP Code Analysis Report - SSRF",
            f"Date and Time of Report Generation: {timestamp}",
            "",
            "Report Summary:",
            "This report provides an in-depth analysis of potential Server-Side Request Forgery (SSRF) vulnerabilities in PHP files.",
            "The goal is to detect any unvalidated external resource fetching that could be exploited by attackers.",
            "",
            "Actions Taken:",
            "1. PHP files in the 'input/vulnerable/' directory were analyzed to identify potential SSRF vulnerabilities.",
            "",
            "Files Scanned:"
        ]

        for file in self.scanned_files:
            report_lines.append(f" - {file}")

        report_lines.extend([
            "",
            "Detected Vulnerabilities:",
            ""
        ])

        if not self.vulnerabilities:
            report_lines.append("No SSRF vulnerabilities detected.")
        else:
            # Group vulnerabilities by file
            vuln_by_file = defaultdict(list)
            for vuln in self.vulnerabilities:
                vuln_by_file[vuln['file']].append(vuln)

            for file, vulns in vuln_by_file.items():
                report_lines.append(f"File: {file}")
                for vuln in vulns:
                    report_lines.append(f"Description: {vuln['description']}")
                    report_lines.append(f"Impact: {vuln['impact']}")
                    report_lines.append(f"Recommendation: {vuln['recommendation']}")
                    report_lines.append("")  # Blank line between vulnerabilities

        report_lines.extend([
            "Explanation:",
            "Server-Side Request Forgery (SSRF) vulnerabilities occur when an application fetches a remote resource without proper validation.",
            "Attackers can exploit SSRF to access internal services or execute malicious requests.",
            "",
            "Recommendation:",
            "1. Validate and sanitize all user-supplied URLs.",
            "2. Use a positive allowlist for permitted domains.",
            "3. Avoid using raw user input in requests to remote resources."
        ])

        return "\n".join(report_lines)
