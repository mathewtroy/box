# detectors/logging_monitoring_detector.py

import re
from typing import Dict, List, Any
from core.base_detector import BaseDetector
import logging

class LoggingMonitoringDetector(BaseDetector):
    """
    Detector for identifying logging and monitoring issues in PHP files,
    such as missing logging of critical events or logging of sensitive data.
    """

    def __init__(self, config: Dict):
        """
        Initialize the LoggingMonitoringDetector with the given configuration.

        Args:
            config (Dict): Configuration dictionary.
        """
        super().__init__(config)
        self.logger = logging.getLogger(self.__class__.__name__)  # Initialize logger

    def scan(self, input_data: Dict[str, Dict[str, str]]) -> Dict[str, Any]:
        """
        Scan PHP files for logging and monitoring issues.

        Args:
            input_data (Dict[str, Dict[str, str]]): Dictionary containing 'php_files' and their contents.

        Returns:
            Dict[str, Any]: Dictionary containing vulnerabilities and scanned_files.
        """
        vulnerabilities = []
        scanned_files = []

        php_files = input_data.get('php_files', {})
        if not php_files:
            self.logger.info("No PHP files to scan.")
        else:
            for php_file, content in php_files.items():
                if php_file.lower().endswith('.php'):
                    scanned_files.append(php_file)
                    self.logger.info(f"Scanning PHP file: {php_file}")
                    vuln = self.analyze_php_file(content, php_file)
                    for v in vuln:
                        v['detector'] = 'LoggingMonitoringDetector'  # Add detector name
                    vulnerabilities.extend(vuln)
                else:
                    self.logger.warning(f"Skipping non-PHP file: {php_file}")

        return {
            'vulnerabilities': vulnerabilities,
            'scanned_files': scanned_files
        }

    def analyze_php_file(self, content: str, php_file: str) -> List[Dict]:
        """
        Analyze a PHP file for logging and monitoring issues.

        Args:
            content (str): Content of the PHP file.
            php_file (str): Name of the PHP file.

        Returns:
            List[Dict]: List of detected vulnerabilities.
        """
        vulnerabilities = []

        # Check for missing logging
        vulnerabilities.extend(self.find_missing_logging(content, php_file))
        # Check for logging of sensitive data
        vulnerabilities.extend(self.find_sensitive_data_logging(content, php_file))

        return vulnerabilities

    def find_missing_logging(self, content: str, php_file: str) -> List[Dict]:
        """
        Check if logging functions are missing from the PHP content.

        Args:
            content (str): The content of the PHP file.
            php_file (str): The name of the PHP file.

        Returns:
            List[Dict]: A list of vulnerabilities related to missing logging.
        """
        vulnerabilities = []

        # Define logging-related functions
        logging_functions = ["error_log", "file_put_contents", "Monolog"]
        log_calls = re.findall(r'\b(?:' + '|'.join(logging_functions) + r')\b', content)

        # If no logging functions are found, add a vulnerability
        if not log_calls:
            vulnerabilities.append({
                'file': php_file,
                'description': 'Missing logging of critical events.',
                'impact': 'Security-relevant events may not be logged, making it hard to detect attacks.',
                'recommendation': 'Add logging for events such as login attempts, registration, and data modifications.'
            })
            self.logger.warning(f"Missing logging functions in {php_file}")

        return vulnerabilities

    def find_sensitive_data_logging(self, content: str, php_file: str) -> List[Dict]:
        """
        Check if sensitive data might be logged in the PHP content.

        Args:
            content (str): The content of the PHP file.
            php_file (str): The name of the PHP file.

        Returns:
            List[Dict]: A list of vulnerabilities related to sensitive data being logged.
        """
        vulnerabilities = []

        # Define sensitive data patterns
        sensitive_data_patterns = ["password", "credentials", "secret"]
        # Check if any sensitive data patterns are found in logging functions
        for pattern in sensitive_data_patterns:
            if re.search(rf'error_log\([^\)]*{pattern}[^\)]*\)', content, re.IGNORECASE):
                vulnerabilities.append({
                    'file': php_file,
                    'description': f'Sensitive data "{pattern}" may be logged.',
                    'impact': 'Logging sensitive data can lead to data leaks if logs are exposed.',
                    'recommendation': 'Ensure sensitive data (like passwords) is not logged in any form.'
                })
                self.logger.warning(f"Sensitive data '{pattern}' may be logged in {php_file}")

        return vulnerabilities
