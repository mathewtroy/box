from core.vulnerability_manager import VulnerabilityManager
from config.config import Config


def make_stub(detector_name):
    """Create a stub detector with a fixed name and predictable results."""
    class _Stub:
        def __init__(self, config): pass

        def scan(self, _):
            return {
                "vulnerabilities": [{
                    "file": "dummy.php",
                    "description": "stub",
                    "impact": "low",
                    "recommendation": "n/a",
                }],
                "scanned_files": ["dummy.php"],
            }

    _Stub.__name__ = detector_name
    return _Stub


def test_manager_aggregates():
    """Checks if VulnerabilityManager correctly collects results from multiple detectors."""
    cfg = Config()
    manager = VulnerabilityManager(cfg)

    # plug two distinct stub detectors
    manager.detectors = [make_stub("DetectorA")(cfg), make_stub("DetectorB")(cfg)]

    result = manager.run_detectors({"php_files": {}, "sql_files": {}})

    assert len(result["vulnerabilities"]) == 2
    assert {v["detector"] for v in result["vulnerabilities"]} == {"DetectorA", "DetectorB"}
