import random, string
from pathlib import Path
import pytest
import logging

from core.vulnerability_manager import VulnerabilityManager
from config.config import Config
logging.getLogger("LoggingMonitoringDetector").setLevel(logging.ERROR)


def _make_dummy_files(dst: Path, count: int = 1000, lines: int = 10):
    dst.mkdir(parents=True, exist_ok=True)
    for i in range(count):
        code = "<?php\n" + "\n".join(
            f'echo "{random.choice(string.ascii_letters)}";' for _ in range(lines)
        )
        (dst / f"file_{i}.php").write_text(code, encoding="utf-8")


@pytest.mark.benchmark(group="scan_speed")
def test_scan_1000_files_under_2_seconds(benchmark, tmp_path):
    """Static scan of ~1000 tiny PHP files must finish in 2s."""
    php_dir = tmp_path / "input" / "vulnerable"
    _make_dummy_files(php_dir)

    cfg = Config()
    cfg.php_directory = str(php_dir)
    cfg.sql_directory = str(tmp_path)

    vm = VulnerabilityManager(cfg)
    # remove Selenium detector
    vm.detectors = [d for d in vm.detectors
                    if d.__class__.__name__ != "DynamicInjectionDetector"]

    def run():
        data = {
            "php_files": {p.name: p.read_text() for p in php_dir.iterdir()},
            "sql_files": {},
        }
        vm.run_detectors(data)

    benchmark(run)                       # just execute & time it
    mean = benchmark.stats.stats.mean    # ms â†’ convert to seconds
    assert mean / 1000 < 2.0, f"Mean {mean/1000:.2f}s is too slow"
