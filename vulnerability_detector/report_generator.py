from datetime import datetime


def generate_detailed_report(success, page_name, vulnerabilities, captured_data=None, page_source=None):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_path = 'reports/result_xss.txt'

    with open(report_path, 'w') as report_file:
        report_file.write(
            f"Vulnerability Report\n"
            f"Part of the bachelor's thesis\n"
            f"Date and Time of Report Generation: {timestamp}\n"
            f"\n"
            f"Report Summary:\n"
            f"This report outlines the detection of vulnerabilities on various web pages and demonstrates potential exploitations.\n"
            f"\n"
            f"Actions Taken:\n"
            f"1. Opened the login page and entered credentials.\n"
            f"2. Navigated to the '{page_name}' page and submitted potentially vulnerable data to test for XSS.\n"
            f"3. Verified if the data was stored correctly by accessing the database interface.\n"
            f"4. Captured cookies and any accessible sensitive data.\n"
            f"\n"
        )

        for vulnerability in vulnerabilities:
            report_file.write(
                f"Page Name: {page_name}\n"
                f"Vulnerability Found: {vulnerability['type']}\n"
                f"Description: {vulnerability['description']}\n"
                f"Potential Impact: {vulnerability['impact']}\n"
                f"Recommended Fix: {vulnerability['fix']}\n"
                f"Location: {vulnerability['location']}\n"
                f"\n"
            )

        if success:
            report_file.write(
                "Result:\nThe potentially vulnerable data was successfully submitted and verified in the database.\n")
            if captured_data:
                report_file.write(f"\nCaptured Data:\nCookies: {captured_data['cookies']}\n")
                report_file.write(f"Session ID (PHPSESSID): {captured_data['PHPSESSID']}\n")
                report_file.write(f"Username: {captured_data['username']}\nPassword: {captured_data['password']}\n")

            if page_source:
                report_file.write(f"\nCaptured Page Source after XSS Execution:\n{page_source}\n")
        else:
            report_file.write("No vulnerabilities were detected during the scan.\n")

    print("Detailed report generated successfully!")


def generate_sql_injection_report(success, page_name, vulnerabilities, page_source=None):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_path = 'reports/result_sql_injection.txt'

    with open(report_path, 'w', encoding='utf-8') as report_file:
        report_file.write(
            f"SQL Injection Vulnerability Report\n"
            f"Part of the bachelor's thesis\n"
            f"Date and Time of Report Generation: {timestamp}\n"
            f"\n"
            f"Report Summary:\n"
            f"This report outlines the detection of potential SQL Injection vulnerabilities on the website.\n"
            f"\n"
            f"Actions Taken:\n"
            f"1. Logged into the application with valid credentials.\n"
            f"2. Navigated to the '{page_name}' page and submitted inputs containing special characters to simulate SQL Injection attempts.\n"
            f"3. Observed application responses for error messages or unexpected behavior.\n"
            f"\n"
        )

        if vulnerabilities:
            report_file.write("Vulnerabilities Found:\n\n")
            for vulnerability in vulnerabilities:
                report_file.write(
                    f"Vulnerability Type: {vulnerability['type']}\n"
                    f"Payload Used: {vulnerability['payload']}\n"
                    f"Description: {vulnerability['description']}\n"
                    f"Potential Impact: {vulnerability['impact']}\n"
                    f"Recommended Fix: {vulnerability['fix']}\n"
                    f"Location: {vulnerability['location']}\n"
                    f"\n"
                )
            if page_source:
                report_file.write(f"Captured Page Source:\n{page_source}\n")
            report_file.write("Result:\nPotential SQL Injection vulnerabilities were detected and are detailed above.\n")
        else:
            report_file.write("Result:\nNo SQL Injection vulnerabilities were detected during the simulation.\n")

    print("SQL Injection report generated successfully!")