import logging
from rich.console import Console
from rich.logging import RichHandler


def setup_logging(log_level=logging.INFO, log_file="logs/vulnerability_detector.log"):
    """
    Sets up logging with RichHandler for colored console output and FileHandler for logging to a file.

    Args:
        log_level (int, optional): Logging level. Defaults to logging.INFO.
        log_file (str, optional): Filename for the log file. Defaults to "logs/vulnerability_detector.log".
    """
    console = Console()

    # Get the root logger and set the logging level
    logger = logging.getLogger()
    logger.setLevel(log_level)

    # Clear existing handlers to prevent duplicate logs
    if logger.hasHandlers():
        logger.handlers.clear()

    # File logging: Include level and timestamp
    file_formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")

    file_handler = logging.FileHandler(log_file, encoding="utf-8")
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)

    # Console logging: Add level and timestamp with colors
    rich_handler = RichHandler(
        console=console,
        show_time=True,        # Enable timestamp
        show_level=True,       # Enable log level
        show_path=False,       # Disable showing file paths
        rich_tracebacks=True   # Enable rich tracebacks for errors
    )

    # Format for console logs
    console_formatter = logging.Formatter(
        "%(levelname)-8s [%(asctime)s] %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )
    rich_handler.setFormatter(console_formatter)

    logger.addHandler(rich_handler)


def read_file_contents(file_path: str) -> str:
    """
    Reads the contents of a file and returns it as a string.

    Args:
        file_path (str): The path to the file.

    Returns:
        str: Content of the file or empty string if unable to read.
    """
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except Exception as e:
        logging.error(f"Error reading {file_path}: {e}")
        return ""


def capture_cookies(driver):
    """
    Captures cookies from the current browser session.

    Args:
        driver: Selenium WebDriver instance.

    Returns:
        str: Cookies from the current session.
    """
    return driver.execute_script("return document.cookie")


def capture_sensitive_data(driver):
    """
    Captures sensitive data like cookies and PHPSESSID.

    Args:
        driver: Selenium WebDriver instance.

    Returns:
        dict: A dictionary with sensitive data.
    """
    cookies = capture_cookies(driver)
    phpsessid = ''
    if 'PHPSESSID=' in cookies:
        phpsessid = cookies.split('PHPSESSID=')[1].split(';')[0]
    return {
        "cookies": cookies,
        "PHPSESSID": phpsessid,
    }
