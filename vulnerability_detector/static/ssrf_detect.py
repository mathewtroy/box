import os
import re
from report_generators.ssrf_report import generate_ssrf_report
from utils.utils import read_file_contents


def find_ssrf_patterns(content, php_file):
    """
    Identify potential SSRF patterns in the PHP content.

    Args:
        content (str): The content of the PHP file.
        php_file (str): The name of the PHP file being analyzed.

    Returns:
        list: A list of SSRF vulnerabilities found in the file.
    """
    vulnerabilities = []
    ssrf_patterns = [
        r'\b(file_get_contents|curl_exec|curl_init|fopen|fsockopen|readfile)\b',  # Functions often exploited for SSRF
        r'\bhttp:\/\/|https:\/\/|ftp:\/\/|file:\/\/\b'  # Hardcoded URLs indicating external access
    ]

    for pattern in ssrf_patterns:
        if re.search(pattern, content, re.IGNORECASE):
            vulnerabilities.append({
                'file': php_file,
                'description': 'Potential SSRF vulnerability due to unvalidated external resource fetching.',
                'impact': 'May allow attackers to access internal services or execute malicious requests.',
                'recommendation': (
                    'Validate and sanitize all user-supplied URLs. Use a positive allowlist for permitted domains. '
                    'Avoid using raw user input in requests to remote resources.'
                )
            })
            break  # Exit loop once a vulnerability is detected for this file

    return vulnerabilities


def scan_php_file_for_ssrf(php_file, php_dir):
    """
    Scan a single PHP file for potential SSRF vulnerabilities.

    Args:
        php_file (str): The name of the PHP file being scanned.
        php_dir (str): The directory containing the PHP files.

    Returns:
        tuple: A list of vulnerabilities and the file name.
    """
    php_path = os.path.join(php_dir, php_file)
    content = read_file_contents(php_path)

    if not content:
        print(f"Could not read file: {php_path}")
        return [], php_file

    print(f"Scanning file: {php_file}")
    vulnerabilities = find_ssrf_patterns(content, php_file)
    return vulnerabilities, php_file


def run_ssrf_test():
    """
    Main function to scan PHP files for SSRF vulnerabilities and generate a report.
    """
    php_dir = os.path.join('input', 'vulnerable')
    scanned_files = []
    all_vulnerabilities = []

    # Check if the directory exists
    if not os.path.exists(php_dir):
        print(f"Directory not found: {php_dir}")
        return

    # List all PHP files in the directory
    php_files = [f for f in os.listdir(php_dir) if f.lower().endswith('.php')]

    if not php_files:
        print(f"No PHP files found in {php_dir}")
        return

    print("Scanning PHP files for SSRF issues:", php_files)
    for php_file in php_files:
        vulnerabilities, scanned_file = scan_php_file_for_ssrf(php_file, php_dir)
        all_vulnerabilities.extend(vulnerabilities)
        scanned_files.append(scanned_file)

    # Generate the SSRF report
    generate_ssrf_report(all_vulnerabilities, scanned_files)
    print("SSRF Report generated successfully at reports/result_static_php_ssrf.txt!\n")
