import os
import re
from report_generators.insecure_design_report import generate_insecure_design_report
from utils.utils import read_file_contents


def is_auth_related_file(php_file):
    """
    Check if the file name suggests it is related to authentication.

    Args:
        php_file (str): The name of the PHP file.

    Returns:
        bool: True if the file is related to authentication, False otherwise.
    """
    return bool(re.search(r'\b(login|auth|signin|sign_in)\b', php_file, re.IGNORECASE))


def contains_password_keywords(content):
    """
    Check if the file content includes keywords related to passwords.

    Args:
        content (str): The content of the PHP file.

    Returns:
        bool: True if password-related keywords are found, False otherwise.
    """
    return bool(re.search(r'\b(pass|password|passwrd)\b', content, re.IGNORECASE))


def check_insecure_design_indicators(content, php_file):
    """
    Analyze PHP content for insecure design indicators, such as missing brute-force protection
    or two-factor authentication mechanisms.

    Args:
        content (str): The content of the PHP file.
        php_file (str): The name of the PHP file.

    Returns:
        list: A list of detected vulnerabilities.
    """
    vulnerabilities = []

    # Check for brute-force protection mechanism
    brute_force_protection_found = bool(
        re.search(r'\b(login_attempts|lockout|rate_limit|sleep)\b', content, re.IGNORECASE))

    # Check for two-factor authentication indicators
    two_factor_authentication_found = bool(
        re.search(r'\b(two_factor|send_otp|check_2fa|verify_otp)\b', content, re.IGNORECASE))

    if not brute_force_protection_found:
        vulnerabilities.append({
            'file': php_file,
            'description': 'Missing brute-force protection mechanism.',
            'impact': 'Vulnerable to brute-force attacks.',
            'recommendation': 'Implement account lockout after multiple failed login attempts or add delay between attempts.'
        })

    if not two_factor_authentication_found:
        vulnerabilities.append({
            'file': php_file,
            'description': 'Missing two-factor authentication.',
            'impact': 'Accounts are vulnerable to unauthorized access with password alone.',
            'recommendation': 'Add two-factor authentication for stronger security.'
        })

    return vulnerabilities


def analyze_php_code_for_insecure_design(content, php_file):
    """
    Analyze PHP content for insecure design issues such as lack of brute-force protection and 2FA.

    Args:
        content (str): The content of the PHP file.
        php_file (str): The name of the PHP file.

    Returns:
        list: A list of detected vulnerabilities.
    """
    vulnerabilities = []

    if not is_auth_related_file(php_file) or not contains_password_keywords(content):
        return vulnerabilities  # Skip files not related to login or without password-related keywords

    # Check for specific insecure design indicators
    vulnerabilities.extend(check_insecure_design_indicators(content, php_file))

    return vulnerabilities


def scan_php_files_for_insecure_design(php_dir):
    """
    Scan all PHP files in a directory for insecure design issues.

    Args:
        php_dir (str): The directory containing PHP files.

    Returns:
        tuple: A list of scanned files and a list of detected vulnerabilities.
    """
    scanned_files = []
    all_vulnerabilities = []

    if not os.path.exists(php_dir):
        print(f"Directory not found: {php_dir}")
        return scanned_files, all_vulnerabilities

    php_files = [f for f in os.listdir(php_dir) if f.lower().endswith('.php')]

    if not php_files:
        print(f"No PHP files found in {php_dir}")
        return scanned_files, all_vulnerabilities

    print("Scanning PHP files for insecure design issues:", php_files)
    for php_file in php_files:
        php_path = os.path.join(php_dir, php_file)
        content = read_file_contents(php_path)
        scanned_files.append(php_file)

        if not content:
            print(f"Could not read file: {php_path}")
            continue

        print(f"Scanning file: {php_file}")
        vulnerabilities = analyze_php_code_for_insecure_design(content, php_file)
        all_vulnerabilities.extend(vulnerabilities)

    return scanned_files, all_vulnerabilities


def run_insecure_design_test():
    """
    Main function to run the insecure design test.
    Scans PHP files for potential insecure design issues and generates a report.
    """
    php_dir = os.path.join('input', 'vulnerable')
    scanned_files, all_vulnerabilities = scan_php_files_for_insecure_design(php_dir)
    generate_insecure_design_report(all_vulnerabilities, scanned_files)
    print("Insecure Design Report generated successfully at reports/result_static_php_insecure_design.txt!\n")
