import os
import re
from report_generators.injection_report import generate_injection_report
from utils.utils import read_file_contents


# Function to scan PHP files for potential XSS vulnerabilities
def scan_php_files_for_xss(php_dir):
    """
    Scan PHP files in the specified directory for potential XSS vulnerabilities.

    Args:
        php_dir (str): The directory containing PHP files.

    Returns:
        list: A list of identified XSS vulnerabilities.
    """
    vulnerabilities = []

    # Ensure the directory exists
    if not os.path.exists(php_dir):
        print(f"Directory not found: {php_dir}")
        return vulnerabilities

    # Collect PHP files
    php_files = [f for f in os.listdir(php_dir) if f.lower().endswith('.php')]

    if not php_files:
        print(f"No PHP files found in {php_dir}")
        return vulnerabilities

    print("Scanning PHP files for injection (XSS) vulnerabilities:", php_files)

    for php_file in php_files:
        php_path = os.path.join(php_dir, php_file)
        content = read_file_contents(php_path)

        if not content:
            print(f"Could not read file: {php_path}")
            continue

        print(f"Scanning file: {php_file}")
        vulnerabilities.extend(analyze_php_file_for_xss(content, php_file))

    return vulnerabilities


# Function to analyze a single PHP file for XSS vulnerabilities
def analyze_php_file_for_xss(content, php_file):
    """
    Analyze the content of a PHP file for XSS vulnerabilities.

    Args:
        content (str): The content of the PHP file.
        php_file (str): The name of the PHP file.

    Returns:
        list: A list of vulnerabilities detected in the file.
    """
    vulnerabilities = []

    # Define patterns to detect potential XSS vulnerabilities
    xss_patterns = [
        re.compile(r"echo\s+\$_(GET|POST|REQUEST)\[.*\];", re.IGNORECASE),
        re.compile(r"print\s+\$_(GET|POST|REQUEST)\[.*\];", re.IGNORECASE),
        re.compile(r"<\?=\s*\$_(GET|POST|REQUEST)\[.*\]\s*\?>", re.IGNORECASE),
        re.compile(r"\$_(GET|POST|REQUEST)\[.*\]", re.IGNORECASE),
    ]

    # Check the content for each pattern
    for pattern in xss_patterns:
        matches = pattern.findall(content)
        if matches:
            vulnerabilities.append({
                'file': php_file,
                'description': 'Potential XSS vulnerability detected: unfiltered user input is directly output to the page.',
                'recommendation': 'Sanitize user input by using htmlspecialchars() or a similar function to escape HTML characters.',
                'lines': matches,
            })
            print(f"Potential XSS vulnerability found in {php_file}")

    return vulnerabilities


# Function to run the injection test
def run_injection_test():
    """
    Main function to run the injection (XSS) test.
    Scans PHP files and generates a report of identified vulnerabilities.
    """
    php_dir = os.path.join('input', 'vulnerable')
    vulnerabilities = scan_php_files_for_xss(php_dir)

    # Generate the XSS injection report
    generate_injection_report(vulnerabilities)
    print("Injection (XSS) Report generated successfully at reports/result_static_php_injection.txt!\n")
