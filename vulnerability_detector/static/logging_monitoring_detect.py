import os
import re
from report_generators.logging_monitoring_report import generate_logging_monitoring_report
from utils.utils import read_file_contents


def find_missing_logging(content, php_file):
    """
    Check if logging functions are missing from the PHP content.

    Args:
        content (str): The content of the PHP file.
        php_file (str): The name of the PHP file.

    Returns:
        list: A list of vulnerabilities related to missing logging.
    """
    vulnerabilities = []

    # Define logging-related functions
    logging_functions = ["error_log", "file_put_contents", "Monolog"]
    log_calls = re.findall(r'\b(?:' + '|'.join(logging_functions) + r')\b', content)

    # If no logging functions are found, add a vulnerability
    if not log_calls:
        vulnerabilities.append({
            'file': php_file,
            'description': 'Missing logging of critical events.',
            'impact': 'Security-relevant events may not be logged, making it hard to detect attacks.',
            'recommendation': 'Add logging for events such as login attempts, registration, and data modifications.'
        })

    return vulnerabilities


def find_sensitive_data_logging(content, php_file):
    """
    Check if sensitive data might be logged in the PHP content.

    Args:
        content (str): The content of the PHP file.
        php_file (str): The name of the PHP file.

    Returns:
        list: A list of vulnerabilities related to sensitive data being logged.
    """
    vulnerabilities = []

    # Define sensitive data patterns
    sensitive_data_patterns = ["password", "credentials", "secret"]
    if any(re.search(pattern, content, re.IGNORECASE) for pattern in sensitive_data_patterns):
        vulnerabilities.append({
            'file': php_file,
            'description': 'Sensitive data may be logged.',
            'impact': 'Logging sensitive data can lead to data leaks if logs are exposed.',
            'recommendation': 'Ensure sensitive data (like passwords) is not logged in any form.'
        })

    return vulnerabilities


def analyze_php_code_for_logging(content, php_file):
    """
    Analyze PHP content for potential logging and monitoring issues.

    Args:
        content (str): The content of the PHP file.
        php_file (str): The name of the PHP file.

    Returns:
        list: A list of detected vulnerabilities.
    """
    vulnerabilities = []

    # Check for missing logging and sensitive data logging
    vulnerabilities.extend(find_missing_logging(content, php_file))
    vulnerabilities.extend(find_sensitive_data_logging(content, php_file))

    return vulnerabilities


def scan_php_files_for_logging(php_dir):
    """
    Scan PHP files in the specified directory for logging and monitoring issues.

    Args:
        php_dir (str): The directory containing PHP files.

    Returns:
        tuple: A list of scanned files and a list of detected vulnerabilities.
    """
    scanned_files = []
    all_vulnerabilities = []

    if not os.path.exists(php_dir):
        print(f"Directory not found: {php_dir}")
        return scanned_files, all_vulnerabilities

    php_files = [f for f in os.listdir(php_dir) if f.lower().endswith('.php')]

    if not php_files:
        print(f"No PHP files found in {php_dir}")
        return scanned_files, all_vulnerabilities

    print("Scanning PHP files for logging and monitoring issues:", php_files)
    for php_file in php_files:
        php_path = os.path.join(php_dir, php_file)
        content = read_file_contents(php_path)
        scanned_files.append(php_file)

        if not content:
            print(f"Could not read file: {php_path}")
            continue

        vulnerabilities = analyze_php_code_for_logging(content, php_file)
        all_vulnerabilities.extend(vulnerabilities)

    return scanned_files, all_vulnerabilities


def run_logging_monitoring_test():
    """
    Main function to run the logging and monitoring test.
    Scans PHP files for logging and monitoring issues and generates a report.
    """
    php_dir = os.path.join('input', 'vulnerable')
    scanned_files, all_vulnerabilities = scan_php_files_for_logging(php_dir)
    generate_logging_monitoring_report(all_vulnerabilities, scanned_files)
    print("Logging and Monitoring Report generated successfully at reports/result_static_php_logging_monitoring.txt!\n")
